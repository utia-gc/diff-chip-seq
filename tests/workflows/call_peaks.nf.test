nextflow_workflow {

    name "Test Workflow CALL_PEAKS"
    script "workflows/call_peaks.nf"
    workflow "CALL_PEAKS"

    test("CALL_PEAKS calls peaks for paired ChIP and Input files -- macs3 separate replicates.") {
        // instantiate helper objects
        def readsChIPPERep1Lane1  = new ReadsChIPPERep1Lane1()
        def readsInputPERep1Lane1 = new ReadsInputPERep1Lane1()
        def readsChIPPERep2Lane1  = new ReadsChIPPERep2Lane1()
        def readsInputPERep2Lane1 = new ReadsInputPERep2Lane1()
        def refs = new RefsEnsembl()


        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsChIPPERep1Lane1.getSampleName()}",
                            lane:         "${readsChIPPERep1Lane1.getLane()}",
                            replicate:    "${readsChIPPERep1Lane1.getReplicate()}",
                            target:       "${readsChIPPERep1Lane1.getTarget()}",
                            mode:         "${readsChIPPERep1Lane1.getMode()}",
                            controlType:  "${readsChIPPERep1Lane1.getControlType()}",
                            readType:     "${readsChIPPERep1Lane1.getReadType()}",
                            rgFields:     "${readsChIPPERep1Lane1.getRGFields()}",
                        ],
                        file("${projectDir}/${readsChIPPERep1Lane1.getBam()}"),
                        file("${projectDir}/${readsChIPPERep1Lane1.getBamIndex()}")
                    ],
                    [
                        [
                            sampleName:   "${readsChIPPERep2Lane1.getSampleName()}",
                            lane:         "${readsChIPPERep2Lane1.getLane()}",
                            replicate:    "${readsChIPPERep2Lane1.getReplicate()}",
                            target:       "${readsChIPPERep2Lane1.getTarget()}",
                            mode:         "${readsChIPPERep2Lane1.getMode()}",
                            controlType:  "${readsChIPPERep2Lane1.getControlType()}",
                            readType:     "${readsChIPPERep2Lane1.getReadType()}",
                            rgFields:     "${readsChIPPERep2Lane1.getRGFields()}",
                        ],
                        file("${projectDir}/${readsChIPPERep2Lane1.getBam()}"),
                        file("${projectDir}/${readsChIPPERep2Lane1.getBamIndex()}")
                    ],
                    [
                        [
                            sampleName:   "${readsInputPERep1Lane1.getSampleName()}",
                            lane:         "${readsInputPERep1Lane1.getLane()}",
                            replicate:    "${readsInputPERep1Lane1.getReplicate()}",
                            target:       "${readsInputPERep1Lane1.getTarget()}",
                            mode:         "${readsInputPERep1Lane1.getMode()}",
                            controlType:  "${readsInputPERep1Lane1.getControlType()}",
                            readType:     "${readsInputPERep1Lane1.getReadType()}",
                            rgFields:     "${readsInputPERep1Lane1.getRGFields()}",
                        ],
                        file("${projectDir}/${readsInputPERep1Lane1.getBam()}"),
                        file("${projectDir}/${readsInputPERep1Lane1.getBamIndex()}")
                    ],
                    [
                        [
                            sampleName:   "${readsInputPERep2Lane1.getSampleName()}",
                            lane:         "${readsInputPERep2Lane1.getLane()}",
                            replicate:    "${readsInputPERep2Lane1.getReplicate()}",
                            target:       "${readsInputPERep2Lane1.getTarget()}",
                            mode:         "${readsInputPERep2Lane1.getMode()}",
                            controlType:  "${readsInputPERep2Lane1.getControlType()}",
                            readType:     "${readsInputPERep2Lane1.getReadType()}",
                            rgFields:     "${readsInputPERep2Lane1.getRGFields()}",
                        ],
                        file("${projectDir}/${readsInputPERep2Lane1.getBam()}"),
                        file("${projectDir}/${readsInputPERep2Lane1.getBamIndex()}")
                    ],
                )
                input[1] = file("${projectDir}/${refs.getGenome()}")
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 3

            // test peak calling logs for each peak set
            with(workflow.out.callPeaksLog) {
                // test rep1 files
                assert size() == 2
                with(get(0)) {
                    assert size() == 2
                    // test peak calling log
                    String sampleName = [
                        readsChIPPERep1Lane1.getSampleName(),
                        "${readsChIPPERep1Lane1.getTarget()}-vs-${readsChIPPERep1Lane1.getControlType()}",
                        "rep${readsChIPPERep1Lane1.getReplicate()}",
                    ].join('_')
                    assert get(1) ==~ /^.*\/${sampleName}_peaks\.xls/
                }
                // test rep2 files
                with(get(1)) {
                    assert size() == 2
                    // test peak calling log
                    String sampleName = [
                        readsChIPPERep2Lane1.getSampleName(),
                        "${readsChIPPERep2Lane1.getTarget()}-vs-${readsChIPPERep2Lane1.getControlType()}",
                        "rep${readsChIPPERep2Lane1.getReplicate()}",
                    ].join('_')
                    assert get(1) ==~ /^.*\/${sampleName}_peaks\.xls/
                }
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

}
