nextflow_workflow {

    name "Test Workflow Parse_Samplesheet"
    script "subworkflows/parse_samplesheet.nf"
    workflow "Parse_Samplesheet"

    test("Parse_Samplesheet fails -- sampleNames missing.") {
        tag 'nf-schema'
        tag 'invalid'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "${projectDir}/tests/data/samplesheets/invalid/missing-sampleName.csv"
                """
            }
        }

        then {
            // nf-schema samplesheetToList() causes workflow failure with exit status 1 when samplesheet requirements aren't met
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema samplesheetToList() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of samplesheet failed!")
            assert workflow.stderr.contains("-> Entry 1: Missing required field(s): sampleName")
            assert workflow.stderr.contains("-> Entry 2: Missing required field(s): sampleName")
        }

    }


    test("Parse_Samplesheet fails -- replicate missing.") {
        tag 'nf-schema'
        tag 'invalid'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "${projectDir}/tests/data/samplesheets/invalid/missing-replicate.csv"
                """
            }
        }

        then {
            // nf-schema samplesheetToList() causes workflow failure with exit status 1 when samplesheet requirements aren't met
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema samplesheetToList() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of samplesheet failed!")
            assert workflow.stderr.contains("-> Entry 1: Missing required field(s): replicate")
            assert workflow.stderr.contains("-> Entry 2: Missing required field(s): replicate")
        }

    }


    test("Parse_Samplesheet fails -- target missing.") {
        tag 'nf-schema'
        tag 'invalid'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "${projectDir}/tests/data/samplesheets/invalid/missing-target.csv"
                """
            }
        }

        then {
            // nf-schema samplesheetToList() causes workflow failure with exit status 1 when samplesheet requirements aren't met
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema samplesheetToList() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of samplesheet failed!")
            assert workflow.stderr.contains("-> Entry 1: Missing required field(s): target")
            assert workflow.stderr.contains("-> Entry 2: Missing required field(s): target")
        }

    }


    test("Parse_Samplesheet fails -- controlType missing.") {
        tag 'nf-schema'
        tag 'invalid'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "${projectDir}/tests/data/samplesheets/invalid/missing-controlType.csv"
                """
            }
        }

        then {
            // nf-schema samplesheetToList() causes workflow failure with exit status 1 when samplesheet requirements aren't met
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema samplesheetToList() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of samplesheet failed!")
            assert workflow.stderr.contains("-> Entry 1: Missing required field(s): controlType")
            assert workflow.stderr.contains("-> Entry 2: Missing required field(s): controlType")
        }

    }


    test("Parse_Samplesheet fails -- invalid controlType value.") {
        tag 'nf-schema'
        tag 'invalid'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "${projectDir}/tests/data/samplesheets/invalid/invalid-controlType.csv"
                """
            }
        }

        then {
            // nf-schema samplesheetToList() causes workflow failure with exit status 1 when samplesheet requirements aren't met
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema samplesheetToList() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of samplesheet failed!")
            assert workflow.stderr.contains("-> Entry 1: Error for field 'controlType' (control): Type of control library for the ChIP library. Must be one of: [none, input, mock].")
            assert workflow.stderr.contains("-> Entry 2: Error for field 'controlType' (control): Type of control library for the ChIP library. Must be one of: [none, input, mock].")
        }

    }


    test("Parse_Samplesheet successfully creates read channels with lanes -- PE ChIP libraries w/ PE controls.") {
        tag 'nf-schema'

        // instantiate helper objects
        def readsChIPPERep1Lane1  = new ReadsChIPPERep1Lane1()
        def readsChIPPERep2Lane1  = new ReadsChIPPERep2Lane1()
        def readsInputPERep1Lane1 = new ReadsInputPERep1Lane1()
        def readsInputPERep2Lane1 = new ReadsInputPERep2Lane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = "${projectDir}/tests/data/samplesheets/paired-ends_replicates.csv"
                """
            }
        }

        then {
            // test workflow success
            assert workflow.success

            // test expected number samples
            assert workflow.out.samples.size() == 4

            // test expected samples
            with(workflow.out.samples) {
                with(get(0)) {
                    // test metadata
                    with(get(0)) {
                        assert sampleName  == readsChIPPERep1Lane1.getSampleName()
                        assert lane        == readsChIPPERep1Lane1.getLane()
                        assert replicate   == readsChIPPERep1Lane1.getReplicate()
                        assert target      == readsChIPPERep1Lane1.getTarget()
                        assert mode        == readsChIPPERep1Lane1.getMode()
                        assert controlType == readsChIPPERep1Lane1.getControlType()
                        assert readType    == readsChIPPERep1Lane1.getReadType()
                        assert rgFields    == readsChIPPERep1Lane1.getRGFields()
                        assert trimStatus  == 'raw'
                    }
                    // test R1
                    assert get(1) ==~ /^.*\/${file(readsChIPPERep1Lane1.getR1()).name}/
                    // test R2
                    assert get(2) ==~ /^.*\/${file(readsChIPPERep1Lane1.getR2()).name}/
                }
                with(get(1)) {
                    // test metadata
                    with(get(0)) {
                        assert sampleName  == readsInputPERep1Lane1.getSampleName()
                        assert lane        == readsInputPERep1Lane1.getLane()
                        assert replicate   == readsInputPERep1Lane1.getReplicate()
                        assert target      == readsInputPERep1Lane1.getTarget()
                        assert mode        == readsInputPERep1Lane1.getMode()
                        assert controlType == readsInputPERep1Lane1.getControlType()
                        assert readType    == readsInputPERep1Lane1.getReadType()
                        assert rgFields    == readsInputPERep1Lane1.getRGFields()
                        assert trimStatus  == 'raw'
                    }
                    // test R1
                    assert get(1) ==~ /^.*\/${file(readsInputPERep1Lane1.getR1()).name}/
                    // test R2
                    assert get(2) ==~ /^.*\/${file(readsInputPERep1Lane1.getR2()).name}/
                }
                with(get(2)) {
                    // test metadata
                    with(get(0)) {
                        assert sampleName  == readsChIPPERep2Lane1.getSampleName()
                        assert lane        == readsChIPPERep2Lane1.getLane()
                        assert replicate   == readsChIPPERep2Lane1.getReplicate()
                        assert target      == readsChIPPERep2Lane1.getTarget()
                        assert mode        == readsChIPPERep2Lane1.getMode()
                        assert controlType == readsChIPPERep2Lane1.getControlType()
                        assert readType    == readsChIPPERep2Lane1.getReadType()
                        assert rgFields    == readsChIPPERep2Lane1.getRGFields()
                        assert trimStatus  == 'raw'
                    }
                    // test R1
                    assert get(1) ==~ /^.*\/${file(readsChIPPERep2Lane1.getR1()).name}/
                    // test R2
                    assert get(2) ==~ /^.*\/${file(readsChIPPERep2Lane1.getR2()).name}/
                }
                with(get(3)) {
                    // test metadata
                    with(get(0)) {
                        assert sampleName  == readsInputPERep2Lane1.getSampleName()
                        assert lane        == readsInputPERep2Lane1.getLane()
                        assert replicate   == readsInputPERep2Lane1.getReplicate()
                        assert target      == readsInputPERep2Lane1.getTarget()
                        assert mode        == readsInputPERep2Lane1.getMode()
                        assert controlType == readsInputPERep2Lane1.getControlType()
                        assert readType    == readsInputPERep2Lane1.getReadType()
                        assert rgFields    == readsInputPERep2Lane1.getRGFields()
                        assert trimStatus  == 'raw'
                    }
                    // test R1
                    assert get(1) ==~ /^.*\/${file(readsInputPERep2Lane1.getR1()).name}/
                    // test R2
                    assert get(2) ==~ /^.*\/${file(readsInputPERep2Lane1.getR2()).name}/
                }
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

}
