nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("main.nf prints help message") {
        tag 'nf-schema'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                help              = true
            }
        }

        then {
            // It doesn't seem like nf-test supports testing against text printed by log.info, so for now just check that exit code is 0 (workflow succeeds) and no tasks are executed.
            assert workflow.success
            assert workflow.trace.succeeded().size() == 0
        }
    }


    test("main.nf fails -- no project title.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                projectTitle      = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) not supplied
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): projectTitle")
        }

    }


    test("main.nf fails -- spaces in `params.projectTitle`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                projectTitle      = 'project title'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains('ERROR ~ Validation of pipeline parameters failed!')
            assert workflow.stderr.contains("* --projectTitle (project title): Project title can ony contain alphanumeric characters, '.', '_', or '-'.")
        }

    }


    test("main.nf fails -- slashes in `params.projectTitle`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                projectTitle      = 'project/title'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains('ERROR ~ Validation of pipeline parameters failed!')
            assert workflow.stderr.contains("* --projectTitle (project/title): Project title can ony contain alphanumeric characters, '.', '_', or '-'.")
        }

    }


    test("main.nf fails -- no input samplesheet.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                samplesheet       = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) not supplied
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): samplesheet")
        }

    }


    test("main.nf fails -- .txt file for `params.samplesheet`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                samplesheet       = "${projectDir}/tests/data/samplesheets/invalid/samplesheet_not_csv_file.txt"
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
        }

    }


    test("main.nf fails -- file name with spaces for `params.samplesheet`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                samplesheet       = "${projectDir}/tests/data/samplesheets/invalid/spaces in samplesheet name.csv"
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
        }

    }


    test("main.nf fails -- no reference genome.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                genome            = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): genome")
        }

    }


    test("main.nf fails -- no reference annotations.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                annotations       = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): annotations")
        }

    }


    test("main.nf fails -- no trim tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                trimTool          = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): trimTool")
        }

    }


    test("main.nf fails -- invalid trim tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                trimTool          = 'bowtie2'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* --trimTool (bowtie2): Trim tool must be one of the valid options: [fastp, cutadapt].")
        }

    }


    test("main.nf fails -- no map tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                mapTool           = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): mapTool")
        }

    }


    test("main.nf fails -- invalid map tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                mapTool           = 'trimmomatic'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* --mapTool (trimmomatic): Map tool must be one of the valid options: [bwamem2].")
        }

    }


    test("main.nf succeeds with default `nf_test` params") {
        tag 'full'

        // instantiate helper objects
        def readsChIPPERep1Lane1  = new ReadsChIPPERep1Lane1()
        def readsChIPPERep2Lane1  = new ReadsChIPPERep2Lane1()
        def readsInputPERep1Lane1 = new ReadsInputPERep1Lane1()
        def readsInputPERep2Lane1 = new ReadsInputPERep2Lane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks: 8 + (7 * (n fastq pairs)) + (6 * (n samples))
                    - 2: Unzip genome and annotations
                    - 2: Count bases in genome -- Index fasta and count
                    - 1: Build reference genome index
                    - 2 * (n fastq pairs): FastQC) -- Raw and prealigned
                    - 1 * (n fastq pairs): Trim reads
                    - 1 * (n fastq pairs): Map reads
                    - 1 * (n fastq pairs): Sort and index SAMs
                    - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    - 2 * (n samples): Count bases in reads -- Raw and prealigned
                    - 2 * (n fastq pairs): Samtools idxstats and flagstat
                    - 1 * (n samples): Samtools stats
                    - 3: MultiQC -- Reads, mappings, full
            */
            assert workflow.trace.succeeded().size() == 60

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsChIPPERep1Lane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsChIPPERep2Lane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsInputPERep1Lane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsInputPERep2Lane1.getStemName()}_fastp.json").exists()
            // test samtools flagstat and samtools idxstats for individual alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/diff-chip-seq_nf-test/diff-chip-seq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/diff-chip-seq_nf-test/diff-chip-seq_nf-test_data/").exists()
        }

    }


    test("main.nf succeeds with default `nf_test` params and uncompressed genome and annotation files.") {
        tag 'full'

        // instantiate helper objects
        def readsChIPPERep1Lane1  = new ReadsChIPPERep1Lane1()
        def readsChIPPERep2Lane1  = new ReadsChIPPERep2Lane1()
        def readsInputPERep1Lane1 = new ReadsInputPERep1Lane1()
        def readsInputPERep2Lane1 = new ReadsInputPERep2Lane1()
        def refs                  = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                genome            = "${projectDir}/${refs.getGenome()}"
                annotations       = "${projectDir}/${refs.getGTF()}"
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks: 6 + (7 * (n fastq pairs)) + (6 * (n samples))
                    - 2: Count bases in genome -- Index fasta and count
                    - 1: Build reference genome index
                    - 2 * (n fastq pairs): FastQC) -- Raw and prealigned
                    - 1 * (n fastq pairs): Trim reads
                    - 1 * (n fastq pairs): Map reads
                    - 1 * (n fastq pairs): Sort and index SAMs
                    - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    - 2 * (n samples): Count bases in reads -- Raw and prealigned
                    - 2 * (n fastq pairs): Samtools idxstats and flagstat
                    - 1 * (n samples): Samtools stats
                    - 3: MultiQC -- Reads, mappings, full
            */
            assert workflow.trace.succeeded().size() == 58

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsChIPPERep1Lane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsChIPPERep2Lane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsInputPERep1Lane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsInputPERep2Lane1.getStemName()}_fastp.json").exists()
            // test samtools flagstat and samtools idxstats for individual alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/diff-chip-seq_nf-test/diff-chip-seq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/diff-chip-seq_nf-test/diff-chip-seq_nf-test_data/").exists()
        }

    }


    test("main.nf succeeds -- cutadapt.") {
        tag 'full'

        // instantiate helper objects
        def readsChIPPERep1Lane1  = new ReadsChIPPERep1Lane1()
        def readsChIPPERep2Lane1  = new ReadsChIPPERep2Lane1()
        def readsInputPERep1Lane1 = new ReadsInputPERep1Lane1()
        def readsInputPERep2Lane1 = new ReadsInputPERep2Lane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                trimTool          = 'cutadapt'
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks: 8 + (7 * (n fastq pairs)) + (6 * (n samples))
                    - 2: Unzip genome and annotations
                    - 2: Count bases in genome -- Index fasta and count
                    - 1: Build reference genome index
                    - 2 * (n fastq pairs): FastQC) -- Raw and prealigned
                    - 1 * (n fastq pairs): Trim reads
                    - 1 * (n fastq pairs): Map reads
                    - 1 * (n fastq pairs): Sort and index SAMs
                    - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    - 2 * (n samples): Count bases in reads -- Raw and prealigned
                    - 2 * (n fastq pairs): Samtools idxstats and flagstat
                    - 1 * (n samples): Samtools stats
                    - 3: MultiQC -- Reads, mappings, full
            */
            assert workflow.trace.succeeded().size() == 60

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep1Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsChIPPERep2Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep1Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsInputPERep2Lane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsChIPPERep1Lane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsChIPPERep2Lane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsInputPERep1Lane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsInputPERep2Lane1.getStemName()}_cutadapt-log.txt").exists()
            // test samtools flagstat and samtools idxstats for individual alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep1Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsChIPPERep2Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep1Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsInputPERep2Lane1.getStemNameWithoutLane()}.bam.bai").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/diff-chip-seq_nf-test/diff-chip-seq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/diff-chip-seq_nf-test/diff-chip-seq_nf-test_data/").exists()
        }

    }

}
